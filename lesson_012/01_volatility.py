# -*- coding: utf-8 -*-


# Описание предметной области:
#
# При торгах на бирже совершаются сделки - один купил, второй продал.
# Покупают и продают ценные бумаги (акции, облигации, фьючерсы, етс). Ценные бумаги - это по сути долговые расписки.
# Ценные бумаги выпускаются партиями, от десятка до несколько миллионов штук.
# Каждая такая партия (выпуск) имеет свой торговый код на бирже - тикер - https://goo.gl/MJQ5Lq
# Все бумаги из этой партии (выпуска) одинаковы в цене, поэтому говорят о цене одной бумаги.
# У разных выпусков бумаг - разные цены, которые могут отличаться в сотни и тысячи раз.
# Каждая биржевая сделка характеризуется:
#   тикер ценнной бумаги
#   время сделки
#   цена сделки
#   обьем сделки (сколько ценных бумаг было куплено)
#
# В ходе торгов цены сделок могут со временем расти и понижаться. Величина изменения цен называтея волатильностью.
# Например, если бумага №1 торговалась с ценами 11, 11, 12, 11, 12, 11, 11, 11 - то она мало волатильна.
# А если у бумаги №2 цены сделок были: 20, 15, 23, 56, 100, 50, 3, 10 - то такая бумага имеет большую волатильность.
# Волатильность можно считать разными способами, мы будем считать сильно упрощенным способом -
# отклонение в процентах от полусуммы крайних значений цены за торговую сессию:
#   полусумма = (максимальная цена + минимальная цена) / 2
#   волатильность = ((максимальная цена - минимальная цена) / полусумма) * 100%
# Например для бумаги №1:
#   half_sum = (12 + 11) / 2 = 11.5
#   volatility = ((12 - 11) / half_sum) * 100 = 8.7%
# Для бумаги №2:
#   half_sum = (100 + 3) / 2 = 51.5
#   volatility = ((100 - 3) / half_sum) * 100 = 188.34%
#
# В реальности волатильность рассчитывается так: https://goo.gl/VJNmmY
#
# Задача: вычислить 3 тикера с максимальной и 3 тикера с минимальной волатильностью.
# Бумаги с нулевой волатильностью вывести отдельно.
# Результаты вывести на консоль в виде:
#   Максимальная волатильность:
#       ТИКЕР1 - ХХХ.ХХ %
#       ТИКЕР2 - ХХХ.ХХ %
#       ТИКЕР3 - ХХХ.ХХ %
#   Минимальная волатильность:
#       ТИКЕР4 - ХХХ.ХХ %
#       ТИКЕР5 - ХХХ.ХХ %
#       ТИКЕР6 - ХХХ.ХХ %
#   Нулевая волатильность:
#       ТИКЕР7, ТИКЕР8, ТИКЕР9, ТИКЕР10, ТИКЕР11, ТИКЕР12
# Волатильности указывать в порядке убывания. Тикеры с нулевой волатильностью упорядочить по имени.
#
# Подготовка исходных данных
# 1. Скачать файл https://drive.google.com/file/d/1l5sia-9c-t91iIPiGyBc1s9mQ8RgTNqb/view?usp=sharing
#       (обратите внимание на значок скачивания в правом верхнем углу,
#       см https://drive.google.com/file/d/1M6mW1jI2RdZhdSCEmlbFi5eoAXOR3u6G/view?usp=sharing)
# 2. Раззиповать средствами операционной системы содержимое архива
#       в папку python_base/lesson_012/trades
# 3. В каждом файле в папке trades содержится данные по сделакам по одному тикеру, разделенные запятыми.
#   Первая строка - название колонок:
#       SECID - тикер
#       TRADETIME - время сделки
#       PRICE - цена сделки
#       QUANTITY - количество бумаг в этой сделке
#   Все последующие строки в файле - данные о сделках
#
# Подсказка: нужно последовательно открывать каждый файл, вычитывать данные, высчитывать волатильность и запоминать.
# Вывод на консоль можно сделать только после обработки всех файлов.
#
# Для плавного перехода к мультипоточности, код оформить в обьектном стиле, используя следующий каркас
#
# class <Название класса>:
#
#     def __init__(self, <параметры>):
#         <сохранение параметров>
#
#     def run(self):
#         <обработка данных>

import os
from glob import glob as get_files_list
from operator import itemgetter
from python_snippets.utils import time_track

zero_tickers = []
nonzero_tickers_list = []


def counting_volatility(ticker_prices):
    max_price = max(ticker_prices)
    min_price = min(ticker_prices)
    ave_price = (max_price + min_price) / 2
    volatility = (max_price - min_price) / ave_price * 100
    return volatility


def get_prices_list(file):
    ticker_prices = []
    for string in file:
        price = string.split(sep=",")[2]
        try:
            price = float(price)
        except ValueError:
            continue
        except Exception as exc:
            print(exc)
            continue
        ticker_prices.append(price)
    return ticker_prices


class ParsingTicker:

    def __init__(self, filename):
        self.file = filename
        self.volatility = 0
        self.tickers_name = 0

    def run(self):
        with open(self.file, mode='r', encoding='utf8', buffering=1) as file:
            ticker_prices = get_prices_list(file)
            self.volatility = counting_volatility(ticker_prices)
            self.tickers_name = os.path.basename(self.file)
            self.tickers_name = self.tickers_name.split(sep='.')[0]


@time_track
def main():
    files_list = get_files_list("trades/*.csv")
    tickers = [ParsingTicker(filename=file) for file in files_list]

    for ticker in tickers:
        ticker.run()
        if ticker.volatility == 0:
            zero_tickers.append(ticker.tickers_name)
        else:
            nonzero_tickers_list.append((ticker.tickers_name, ticker.volatility))

    nonzero_tickers_list.sort(key=itemgetter(1), reverse=True)
    print('Топ 3 лучших тикеров по волатильности')
    for ticker, vol in nonzero_tickers_list[0:3]:
        print(ticker, round(vol, 2))

    print('')
    print('Топ 3 худших тикеров по волатильности')
    for ticker, vol in nonzero_tickers_list[-1:-4:-1]:
        print(ticker, round(vol, 2))

    print('')
    print('Тикеры с нулевой волатильностью')
    for ticker in zero_tickers:
        print(ticker)


if __name__ == '__main__':
    main()

#  как лучше импортировал glob?
#  проведем аналогию. Допустим мы хотим импортировать модуль math. Представим, что math - это холодильник. А все
#  хранящиеся в нем функции, переменные, константы и объекты - это еда (колбаса, Pepsi, хлеб и т.п.).
#  .
#  from math import pi      # импортировать из модуля (файла) math константу pi. Все остальное не тянем за собой.
#                           # Аналогия: открываем холодильник, берем из него только колбасу, кладем в себе на стол и
#                           # закрываем ходильник. Колбаса на столе. Ее можно есть.
#  2 * pi * radius          # Пример. Константа pi уже доступна в вашем файле. Импортирована. Сразу используем.
#  .
#  ............................
#  from math import *       # импортировать из модуля math совсем все. Помимо pi будут импортированы все объекты, в том
#                           # числе функции (e, pi, sin, cos и десятки других). Плохой вариант. Так лучше не делать,
#                           # т.к. нужна только pi, а мы притянули много чего лишнего.
#                           # Аналогия: вытаскиаем из холодильника всю еду, закрываем холодильник. На столе гора еды.
#                           Мы едим из нее только колбасу. Все остальное мешается на столе.
#  2 * pi * radius          # Пример. Константа pi уже доступна в вашем файле. Импортирована. Сразу используем.
#  sin(pi)                  #         Но еще доступно много чего другого, чего мы не заказывали.
#  .
#  ............................
#  import math              # импортируем модуль math.
#                           # Аналогия: узнаем, где в доме стоит холодильник с едой. Ничего из не вы таскиваем.
#   2 * math.pi * radius    # Пример. Мы знаем где стоит холодильник, когда нужно идет в него, достаем колбасу, едим,
#                           #         кладем назад в холодильник. При каждом использовании открываем/закрываем
#                           #         холодильник.
#  .
#  Резюме:
#   Ппервый способ. Самый быстрый по скорости работы. Но если код большой, и вы пишите собственные функции
#   с подобными именами, то число pi из модуля и функция sin, написанная вами могут путать. Т.е. читая код, где 10
#   разных функций, 5 из которых написали вы, а 5 из модуля, становится трудно ориентироваться. Функциям из math точно
#   можно доверять, а в собственных функциях можно допустить ошибку. В подобном случае лучше использовать 3ий способ.
#   .
#   Второй способ. Не лучший. Можно так делать, если вы действительно собираетесь использовать всё-всё из модуля. Но при
#   этом надо понимать, что в будущем в модуль может быть добавлено что-то новое, а ваш старый код попрежднему будет
#   импортировать всё. Лучше использовать 1ый или 3ий способ.
#   .
#   Третий способ. Чуть менее быстрый, относительно 1го и 2го. Но самый понятный с точки зрения читабельности кода.
#   Если в коде видишь math.pi сразу понимаешь, что этому можно доверять. Особенно пригождается, если импортировано
#   несколько однотипных модулей, в которых может встречать функции/переменные с одинаковыми названиями, а мы хотим
#   иметь возможность обращаться к обоим. Пример:
#           import math
#           import my_egypt_math        # какой-то свой модуль о математики древнего Египта. Число Пи считалось - 3.1604
#           .
#           print(math.pi)              # выведет "3.141592653589793"
#           print(my_egypt_math.pi)     # выведет "3.1604"
