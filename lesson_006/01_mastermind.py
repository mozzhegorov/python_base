# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import check_number
from mastermind_engine import make_number
from mastermind_engine import check_repeat

non_exit = 1

while non_exit:
    # модуль движка загадывает число
    make_number()
    my_num = 0
    steps = 0

    # TODO: вызов "check_number" должен быть только 1 раз.
    #  Каждый вызов ф-ции засталвяет наш скрипт заново вычислять результат. Гораздо выгоднее сделать 1 вызов, сохранить
    #  результат этого вызова. А потом использовать этот результат.
    # в цикле, пока число не отгадано (скопировал комменатрии с 33 строки). Просмотрите структуру, которую предполагает
    # задание, возможно появятся светлые мысли как упростить код (2 while-цикла этого достаточно)
    while check_number(my_num)['cows'] < 4:
        # TODO: тернарный опертор максимум можно использовать для того, чтобы выбрать какое сообщение должно
        #  отобразиться внутри print(), и то это сообщение лучше сохранить заранее.
        print('Я загадал, введите число') if steps < 1 else print('Не верно, введите число повторно')

        #   в цикле, пока число не отгадано
        #       у пользователя запрашивается вариант числа
        #       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
        #       модуль движка проверяет число и выдает быков/коров
        #       результат быков/коров выводится на консоль

        # TODO: вот этот 3ий while меня смущает
        while True:
            my_num = input()
            if check_repeat(my_num) == 1:
                steps += 1
                break
            else:
                print('Вы ввели не корректное число, введите заново')
        print('Коров = ', check_number(my_num)['cows'], 'Быков = ', check_number(my_num)['bulls'])

    print('Вы выиграли, ваше количество шагов равно ', steps)

    # TODO: вот тут точно можно упростить.
    if input('Еще партеечку? Если хотите сыграть напишите "Да"') == 'Да':
        pass
    else:
        non_exit = 0
        print('Спасибо за игру!')
